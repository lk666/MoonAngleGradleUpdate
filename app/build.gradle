import java.text.SimpleDateFormat
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def gitNum = 'git rev-list --count HEAD'.execute([], project.rootDir).text.trim()

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    signingConfigs {
        release {
            // 密钥配置在多人项目中需放到非git文件
            storeFile file('./BlueMoon.keystore')
            storePassword "bluemoon"
            keyAlias "bluemoon"
            keyPassword "!12345678"
        }
        // debug签名是友盟分享要求添加的
        debug {
            storeFile file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "cn.com.bluemoon.delivery"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 51
        versionName "4.10.0"

        buildConfigField("String", "BUILD_CODE", "\"${gitNum}\"")
        buildConfigField("String", "DES_KEY", "\"19490101\"")

        /*个推*/
        manifestPlaceholders = [
                GETUI_APP_ID    : "pEvvQdiNbwAkKpPFIH67G1",
                GETUI_APP_KEY   : "48F1zr3EV59dSUCEiICEC2",
                GETUI_APP_SECRET: "4YzSLDklzJAdISZQCG5Or6",
                PACKAGE_NAME    : applicationId
        ]
        ndk {
            //abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "mips64", "x86", "x86_64"
            abiFilters "armeabi", "armeabi-v7a", "x86", "arm64-v8a"
        }

        multiDexEnabled true
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "RELEASE", "false")
            buildConfigField "String", "MOCK_URL", "\"http://192.168.236.1:9002/mockjsdata/5/%s\""
            buildConfigField "String", "HOST", "\"angelapi.bluemoon.com.cn\""
            buildConfigField "String", "API_URL", "\"https://angelapi.bluemoon.com.cn/%s\""
            buildConfigField "String", "H5_DOMAIN", "\"https://tmallapi.bluemoon.com.cn/%s\""
            buildConfigField "String", "SHARE_TO_SHORT", "\"http://192.168.236.3:8085/%s\""
            buildConfigField "String", "TRACK_HOST", "\"testbmtracking.bluemoon.com.cn\""
            buildConfigField "String", "API_TRACK_URL", "\"https://testbmtracking.bluemoon.com.cn/bd-api-tracking/app/reportData\""

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
//            使用 Variant API 操作变体输出在新插件中已不再受支持

            zipAlignEnabled true
            // 资源压缩必须与代码压缩一起使用
            shrinkResources true
            minifyEnabled true
        }
        release {
            buildConfigField("boolean", "RELEASE", "true")
            buildConfigField "String", "MOCK_URL", "\"http://192.168.236.1:9002/mockjsdata/84/%s\""
            buildConfigField "String", "HOST", "\"angel.bluemoon.com.cn\""
            buildConfigField "String", "API_URL", "\"https://angel.bluemoon.com.cn/%s\""
            buildConfigField "String", "H5_DOMAIN", "\"https://mallapi.bluemoon.com.cn/%s\""
            buildConfigField "String", "SHARE_TO_SHORT", "\"http://192.168.236.3:8085/%s\""
            buildConfigField "String", "TRACK_HOST", "\"bmtracking.bluemoon.com.cn\""
            buildConfigField "String", "API_TRACK_URL", "\"https://bmtracking.bluemoon.com.cn/bd-api-tracking/app/reportData\""

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
        }
    }

    // 解决导入了很多的三方库或者框架，在项目编译的时候会报重复文件错误
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dexOptions {
//        incremental true  // 已弃用
        javaMaxHeapSize "2048m"
        // 忽略方法数限制的检查
        jumboMode true
        // 是否对依赖的库进行dex 预处理来使你的增量构建更快速，因为这个特性可能会使你的clean 构建变慢，因此在你的持续集成服务器上你可能想关闭这个特性
        preDexLibraries false
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ['libs']
        }
    }

    // webp是Android 原生4.0就开始支持的，它能提供和JPEG和PNG相同质量的图片但是size更小。没有任何适配问题

    // 为开发环境创建一个变体，关闭开发版本不需要的配置
    flavorDimensions("env")
    productFlavors {
        // 本地开发版本
        dev {
            // 避免编译不必要的资源
//          resConfigs "en", "xxhdpi"
            // 本地开发环境可以停止友盟统计等不需要的工具
//          buildConfigField("boolean", "UM_FLAG", "false")

            // 禁止每次构建app都自动压缩图片
            aaptOptions {
                cruncherEnabled false
            }
        }

        // jekins、正式环境，使用assembleProdxxx命令编译
        prod {
        }
    }
}

//数据库框架greenDao
apply plugin: 'org.greenrobot.greendao'

greendao {
    //数据库schema版本，也可以理解为数据库版本号
    schemaVersion 3
    //设置DaoMaster 、DaoSession、Dao包名
    daoPackage 'cn.com.bluemoon.delivery.db.gen'
    //设置DaoMaster 、DaoSession、Dao目录
    targetGenDir 'src/main/java'
    //设置生成单元测试目录
//    targetGenDirTest
    //设置自动生成单元测试用例
//    generateTests
}

// 查看各个libs引用关系的输出：
// gradlew -q app:dependencies

dependencies {
    implementation fileTree(include: ['*.*'], dir: 'libs')
    implementation project(':BlueMoonSDK')
    implementation project(':lib_iflytek')
    implementation files('libs/iTextpdf.jar')


    // v4包，指定强制使用此版本
    implementation(rootProject.ext.dependencies["recyclerview-v7"]){
        exclude group:'com.android.support', module:'recyclerview-v7'
    }
    implementation(rootProject.ext.dependencies["cardview-v7"]){
        exclude group:'com.android.support', module:'cardview-v7'
    }
    implementation(rootProject.ext.dependencies["design"]){
        exclude group:'com.android.support', module:'design'
    }
    implementation(rootProject.ext.dependencies["appcompat-v7"]){
        exclude group:'com.android.support', module:'appcompat-v7'
    }
    implementation(rootProject.ext.dependencies["support-v4"]){
        exclude group:'com.android.support', module:'support-v4'
    }
    implementation(rootProject.ext.dependencies["multidex"]){
        exclude group:'com.android.support', module:'multidex'
    }

    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["photoview"]
    implementation rootProject.ext.dependencies["getui"]
    //compile project(':lib_umengshare')
    implementation rootProject.ext.dependencies["umengAnalytics"]
    implementation rootProject.ext.dependencies["lib_umengshare"]
    implementation rootProject.ext.dependencies["lib_log"]
    implementation rootProject.ext.dependencies["lib_widget"]
    implementation rootProject.ext.dependencies["greendao"]
    implementation rootProject.ext.dependencies["greendaoGenerator"]
    implementation rootProject.ext.dependencies["lib_cardocr"]
    implementation rootProject.ext.dependencies["lib_signature_pad"]

    implementation rootProject.ext.dependencies["smartRefreshLayout"]
    implementation rootProject.ext.dependencies["smartRefreshHeader"]
    implementation rootProject.ext.dependencies["baseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["android-pdf-viewer"]  // 引入了25.3.1
    implementation rootProject.ext.dependencies["lib_x5"]
    implementation rootProject.ext.dependencies["lib_badger"]

    implementation rootProject.ext.dependencies["banner"]

    debugImplementation rootProject.ext.dependencies["leakcanary-android"]
    releaseImplementation rootProject.ext.dependencies["leakcanary-android-no-op"]

    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    implementation rootProject.ext.dependencies["opensdk"]
    implementation rootProject.ext.dependencies["lib_map_navigation"]
    implementation rootProject.ext.dependencies["kotlin"]
}

// 包名设置
def buildTime() {
    def df = new SimpleDateFormat("yyyyMMdd'_'HH")
    df.setTimeZone(TimeZone.getDefault())
    return df.format(new Date())
}

android.applicationVariants.all { variant ->
    variant.outputs.all {
        if (outputFile != null) {
            if (outputFile.name.endsWith('debug.apk')) {
                outputFileName = "月亮天使_${buildTime()}_测试版_${android.defaultConfig.versionName}" +
                        "(${gitNum}).apk"
            } else if (outputFile != null && outputFile.name.endsWith('release.apk')) {
                outputFileName = "月亮天使_${buildTime()}_正式版_${android.defaultConfig.versionName}" +
                        "(${gitNum}).apk"
            }
        }
    }
}
repositories {
    mavenCentral()
}

// gradlew clean
// --profile: 开启profiling
// --recompile-scripts: 强制脚本重新编译跳过cache
// --offline:禁止 Gradle获取离线依赖，这是确保任何的延迟都是Gradle试图更新依赖而导致，不会误导你的分析数据。
// 你应该先准备好构建一次工程确保Gradle 已经下载好并且缓存依赖。
// --rerun-tasks:强制Gradle返回所有task 并且忽略任何task 优化。
// gradlew --profile --recompile-scripts --offline --rerun-tasks assembleDevDebug
