package cn.com.bluemoon.delivery.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.bluemoon.delivery.db.entity.ReqBody;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REQ_BODY".
*/
public class ReqBodyDao extends AbstractDao<ReqBody, Long> {

    public static final String TABLENAME = "REQ_BODY";

    /**
     * Properties of entity ReqBody.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Timestamp = new Property(0, Long.class, "timestamp", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property AppId = new Property(2, String.class, "appId", false, "APP_ID");
        public final static Property AppVersion = new Property(3, String.class, "appVersion", false, "APP_VERSION");
        public final static Property Os = new Property(4, String.class, "os", false, "OS");
        public final static Property Uid = new Property(5, String.class, "uid", false, "UID");
        public final static Property Code = new Property(6, String.class, "code", false, "CODE");
        public final static Property EventType = new Property(7, String.class, "eventType", false, "EVENT_TYPE");
        public final static Property EventParam = new Property(8, String.class, "eventParam", false, "EVENT_PARAM");
        public final static Property Status = new Property(9, long.class, "status", false, "STATUS");
        public final static Property Ip = new Property(10, String.class, "ip", false, "IP");
        public final static Property Lng = new Property(11, String.class, "lng", false, "LNG");
        public final static Property Lat = new Property(12, String.class, "lat", false, "LAT");
        public final static Property Mac = new Property(13, String.class, "mac", false, "MAC");
        public final static Property UnitBrand = new Property(14, String.class, "unitBrand", false, "UNIT_BRAND");
        public final static Property UnitModel = new Property(15, String.class, "unitModel", false, "UNIT_MODEL");
        public final static Property UseAgent = new Property(16, String.class, "useAgent", false, "USE_AGENT");
    }


    public ReqBodyDao(DaoConfig config) {
        super(config);
    }
    
    public ReqBodyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REQ_BODY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: timestamp
                "\"IMEI\" TEXT," + // 1: imei
                "\"APP_ID\" TEXT NOT NULL ," + // 2: appId
                "\"APP_VERSION\" TEXT NOT NULL ," + // 3: appVersion
                "\"OS\" TEXT NOT NULL ," + // 4: os
                "\"UID\" TEXT," + // 5: uid
                "\"CODE\" TEXT NOT NULL ," + // 6: code
                "\"EVENT_TYPE\" TEXT NOT NULL ," + // 7: eventType
                "\"EVENT_PARAM\" TEXT," + // 8: eventParam
                "\"STATUS\" INTEGER NOT NULL ," + // 9: status
                "\"IP\" TEXT," + // 10: ip
                "\"LNG\" TEXT," + // 11: lng
                "\"LAT\" TEXT," + // 12: lat
                "\"MAC\" TEXT," + // 13: mac
                "\"UNIT_BRAND\" TEXT," + // 14: unitBrand
                "\"UNIT_MODEL\" TEXT," + // 15: unitModel
                "\"USE_AGENT\" TEXT);"); // 16: useAgent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQ_BODY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReqBody entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindString(3, entity.getAppId());
        stmt.bindString(4, entity.getAppVersion());
        stmt.bindString(5, entity.getOs());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindString(7, entity.getCode());
        stmt.bindString(8, entity.getEventType());
 
        String eventParam = entity.getEventParam();
        if (eventParam != null) {
            stmt.bindString(9, eventParam);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(11, ip);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(12, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(13, lat);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(14, mac);
        }
 
        String unitBrand = entity.getUnitBrand();
        if (unitBrand != null) {
            stmt.bindString(15, unitBrand);
        }
 
        String unitModel = entity.getUnitModel();
        if (unitModel != null) {
            stmt.bindString(16, unitModel);
        }
 
        String useAgent = entity.getUseAgent();
        if (useAgent != null) {
            stmt.bindString(17, useAgent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReqBody entity) {
        stmt.clearBindings();
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(1, timestamp);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindString(3, entity.getAppId());
        stmt.bindString(4, entity.getAppVersion());
        stmt.bindString(5, entity.getOs());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
        stmt.bindString(7, entity.getCode());
        stmt.bindString(8, entity.getEventType());
 
        String eventParam = entity.getEventParam();
        if (eventParam != null) {
            stmt.bindString(9, eventParam);
        }
        stmt.bindLong(10, entity.getStatus());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(11, ip);
        }
 
        String lng = entity.getLng();
        if (lng != null) {
            stmt.bindString(12, lng);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(13, lat);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(14, mac);
        }
 
        String unitBrand = entity.getUnitBrand();
        if (unitBrand != null) {
            stmt.bindString(15, unitBrand);
        }
 
        String unitModel = entity.getUnitModel();
        if (unitModel != null) {
            stmt.bindString(16, unitModel);
        }
 
        String useAgent = entity.getUseAgent();
        if (useAgent != null) {
            stmt.bindString(17, useAgent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReqBody readEntity(Cursor cursor, int offset) {
        ReqBody entity = new ReqBody( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // timestamp
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.getString(offset + 2), // appId
            cursor.getString(offset + 3), // appVersion
            cursor.getString(offset + 4), // os
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uid
            cursor.getString(offset + 6), // code
            cursor.getString(offset + 7), // eventType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eventParam
            cursor.getLong(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ip
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lng
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lat
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mac
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // unitBrand
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // unitModel
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // useAgent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReqBody entity, int offset) {
        entity.setTimestamp(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppId(cursor.getString(offset + 2));
        entity.setAppVersion(cursor.getString(offset + 3));
        entity.setOs(cursor.getString(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCode(cursor.getString(offset + 6));
        entity.setEventType(cursor.getString(offset + 7));
        entity.setEventParam(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.getLong(offset + 9));
        entity.setIp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLng(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLat(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMac(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnitBrand(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUnitModel(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUseAgent(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReqBody entity, long rowId) {
        entity.setTimestamp(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReqBody entity) {
        if(entity != null) {
            return entity.getTimestamp();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReqBody entity) {
        return entity.getTimestamp() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
